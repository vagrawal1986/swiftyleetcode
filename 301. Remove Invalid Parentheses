class Solution {
    func removeInvalidParentheses(_ s: String) -> [String] {
        
        var outerQ = [String]()
        var innerQ = [String]()
        var set = Set<String>()
        var result = [String]()
        
        outerQ.append(s)
        var found = false
        
        while outerQ.count > 0 && !found{
            innerQ = Array(outerQ)
            outerQ.removeAll()
            
            while innerQ.count > 0{                
                let first = innerQ.removeFirst()
                if isValid(first){
                    result.append(first)
                    found = true
                }else{
                    if found == true{continue}
                    for (i,ch) in first.enumerated()  {           
                        if ch.isLetter{continue}
                        let arr = Array(first)
                        let str = String(Array(arr[0..<i] + arr[(i+1)...]))
                        if !set.contains(str){
                            set.insert(str)
                            outerQ.append(str)
                        }
                    }
                }
            }
        }
        return result
    }
    
    func isValid(_ input: String) -> Bool{
        var count = 0
        for ch in input{
            if ch.isLetter{continue}
            if ch == "("{
                count += 1
            }else{
                if count == 0{
                    return false
                }else{
                    count -= 1
                }
            }
        }
        return count == 0
    }
}
